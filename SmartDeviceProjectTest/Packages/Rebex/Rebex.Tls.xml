<doc>
  <assembly>
    <name>Rebex.Tls</name>
  </assembly>
  <members>
    <member name="T:Rebex.Net.TlsClientHelloReceivedEventArgs">
      <summary>
            Provides data for custom TLS ClientHello event handler.
            </summary>
    </member>
    <member name="M:Rebex.Net.TlsClientHelloReceivedEventArgs.GetServerCertificates">
      <summary>
            Gets the server certificate chains used in server's TLS Certificate response, in the order of preference.
            </summary>
    </member>
    <member name="M:Rebex.Net.TlsClientHelloReceivedEventArgs.SetServerCertificates(Rebex.Security.Certificates.CertificateChain[])">
      <summary>
            Sets the server certificate chains used in server's TLS Certificate response, in the order of preference.
            </summary>
      <param name="serverCertificates">Server certificates (chains).</param>
    </member>
    <member name="M:Rebex.Net.TlsClientHelloReceivedEventArgs.GetApplicationProtocols">
      <summary>
            Gets the application protocols advertised by the client in the Application-Layer Protocol Negotiation (ALPN) extension.
            </summary>
    </member>
    <member name="P:Rebex.Net.TlsClientHelloReceivedEventArgs.Socket">
      <summary>
            Gets the socket that received the ClientHello.
            </summary>
    </member>
    <member name="P:Rebex.Net.TlsClientHelloReceivedEventArgs.ServerName">
      <summary>
            Gets the common name of the server as requested by the client.
            </summary>
    </member>
    <member name="P:Rebex.Net.TlsClientHelloReceivedEventArgs.ApplicationProtocol">
      <summary>
            Gets or sets the selected application protocol to be used in the Application-Layer Protocol Negotiation (ALPN) extension.
            It must be one of the values provided by the <see cref="M:Rebex.Net.TlsClientHelloReceivedEventArgs.GetApplicationProtocols" /> method.
            </summary>
    </member>
    <member name="T:Rebex.Net.TlsClientSettings">
      <summary>
            Represents options for <see cref="M:Rebex.Net.TlsStream.AuthenticateAsClient(Rebex.Net.TlsClientSettings)" /> method.
            For additional TLS settings, see <see cref="P:Rebex.Net.TlsStream.Parameters" />.
            </summary>
    </member>
    <member name="M:Rebex.Net.TlsClientSettings.#ctor">
      <summary>
            Creates an instance of <see cref="T:Rebex.Net.TlsClientSettings" />.
            </summary>
    </member>
    <member name="P:Rebex.Net.TlsClientSettings.TargetName">
      <summary>
            Gets or sets the TLS/SSL server's common name.
            </summary>
      <remarks>
            Provided by the Server Name Indication (SNI) extension.
            </remarks>
    </member>
    <member name="P:Rebex.Net.TlsClientSettings.ClientCertificates">
      <summary>
            Gets or sets the collection of certificates used for client certificate authentication.
            </summary>
    </member>
    <member name="T:Rebex.Net.TlsClientSocket">
      <summary>
            Represents a client-side TLS-enabled TCP socket.
            </summary>
      <remarks>
        <p>
            This class is suitable for securing your socket communication using
            TLS 1.3, TLS 1.2, TLS 1.1 and TLS 1.0 protocols.
            </p>
      </remarks>
    </member>
    <member name="M:Rebex.Net.TlsClientSocket.#ctor">
      <summary>
             Initializes an instance of the <see cref="T:Rebex.Net.TlsClientSocket" /> class.
             </summary>
      <remarks>
             The default constructor initializes an instance of the <see cref="T:Rebex.Net.TlsClientSocket" />.
             </remarks>
    </member>
    <member name="M:Rebex.Net.TlsClientSocket.#ctor(System.Net.Sockets.Socket)">
      <summary>
            Initializes an instance of the <see cref="T:Rebex.Net.TlsClientSocket" /> class with the specified base socket.
            </summary>
      <param name="socket">Base socket.</param>
      <remarks>Use this if you need to upgrade an existing socket to use TLS.</remarks>
    </member>
    <member name="M:Rebex.Net.TlsClientSocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)">
      <summary>
            Establishes a connection to a remote device.
            </summary>
      <param name="remoteEP">An <see cref="T:System.Net.EndPoint" /> that represents the remote device.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
      <param name="state">An object containing state information for this request.</param>
      <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous connection.
            </returns>
      <remarks>
            The <see cref="M:Rebex.Net.TlsClientSocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" /> method establishes a network connection to a device
            identified by the <paramref name="remoteEP" /> parameter. Once the connection has been made,
            you can send data to the remote device with the <see cref="M:Rebex.Net.TlsSocket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method,
            or receive data from the remote device with the <see cref="M:Rebex.Net.TlsSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.
            </remarks>
    </member>
    <member name="M:Rebex.Net.TlsClientSocket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
            Establishes a connection to a remote device.
            </summary>
      <param name="serverName">The hostname (or IP address) of the remote device.</param>
      <param name="port">The port number associated with the hostname.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
      <param name="state">An object containing state information for this request.</param>
      <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous connection.
            </returns>
      <remarks>
            The <see cref="M:Rebex.Net.TlsClientSocket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)" /> method establishes a network connection to a host identified
            by the <paramref name="serverName" /> and <paramref name="port" />
            parameters. Once the connection has been made,
            you can send data to the remote device with the <see cref="M:Rebex.Net.TlsSocket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method,
            or receive data from the remote device with the <see cref="M:Rebex.Net.TlsSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.
            </remarks>
    </member>
    <member name="M:Rebex.Net.TlsClientSocket.EndConnect(System.IAsyncResult)">
      <summary>
            Ends a pending asynchronous connection request.
            </summary>
      <param name="asyncResult">Stores state information for this asynchronous operation as well as any user-defined data.</param>
      <remarks>
            The <see cref="M:Rebex.Net.TlsClientSocket.EndConnect(System.IAsyncResult)" /> method completes a request to accept a connection that
            was started with <see cref="M:Rebex.Net.TlsClientSocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" />
            or <see cref="M:Rebex.Net.TlsClientSocket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)" /> method.
            </remarks>
    </member>
    <member name="M:Rebex.Net.TlsClientSocket.Connect(System.Net.EndPoint)">
      <summary>
            Establishes a connection to a remote device.
            </summary>
      <param name="remoteEP">An <see cref="T:System.Net.EndPoint" /> that represents the remote device.</param>
      <remarks>
            The <see cref="M:Rebex.Net.TlsClientSocket.Connect(System.Net.EndPoint)" /> method establishes a network connection to a device identified
            by the <paramref name="remoteEP" /> parameter. Once the connection has been made,
            you can send data to the remote device with the <see cref="M:Rebex.Net.TlsSocket.Send(System.ArraySegment{System.Byte})" /> method,
            or receive data from the remote device with the <see cref="M:Rebex.Net.TlsSocket.Receive(System.ArraySegment{System.Byte})" /> method.
            </remarks>
    </member>
    <member name="M:Rebex.Net.TlsClientSocket.Connect(System.String,System.Int32)">
      <summary>
            Establishes a connection to a remote device.
            </summary>
      <param name="serverName">The hostname (or IP address) of the remote device.</param>
      <param name="port">The port number associated with the hostname.</param>
      <remarks>
            The <see cref="M:Rebex.Net.TlsClientSocket.Connect(System.String,System.Int32)" /> method establishes a network connection to a host identified
            by the <paramref name="serverName" /> and <paramref name="port" />
            parameters. Once the connection has been made,
            you can send data to the remote device with the <see cref="M:Rebex.Net.TlsSocket.Send(System.ArraySegment{System.Byte})" /> method,
            or receive data from the remote device with the <see cref="M:Rebex.Net.TlsSocket.Receive(System.ArraySegment{System.Byte})" /> method.
            </remarks>
    </member>
    <member name="E:Rebex.Net.TlsClientSocket.ValidatingCertificate">
      <summary>
            Occurs when a server certificate needs to be validated.
            </summary>
    </member>
    <member name="T:Rebex.Net.TlsServerSettings">
      <summary>
            Represents options for <see cref="M:Rebex.Net.TlsStream.AuthenticateAsServer(Rebex.Net.TlsServerSettings)" /> method.
            For additional TLS settings, see <see cref="P:Rebex.Net.TlsStream.Parameters" />.
            </summary>
    </member>
    <member name="M:Rebex.Net.TlsServerSettings.#ctor">
      <summary>
            Creates an instance of <see cref="T:Rebex.Net.TlsServerSettings" />.
            </summary>
    </member>
    <member name="P:Rebex.Net.TlsServerSettings.ServerCertificate">
      <summary>
            Gets or sets the TLS/SSL server's certificate.
            </summary>
    </member>
    <member name="T:Rebex.Net.TlsServerSocket">
      <summary>
            Represents a server-side TLS-enabled TCP socket.
            </summary>
      <remarks>
        <p>
            This class is suitable for securing your socket communication using
            TLS 1.3, TLS 1.2, TLS 1.1 and TLS 1.0 protocols.
            </p>
      </remarks>
    </member>
    <member name="M:Rebex.Net.TlsServerSocket.#ctor(System.Net.Sockets.Socket)">
      <summary>
            Initializes an instance of the <see cref="T:Rebex.Net.TlsServerSocket" /> class with the specified base socket.
            </summary>
      <param name="socket">Base socket.</param>
      <remarks>Use this if you need to upgrade an existing socket to use TLS.</remarks>
    </member>
    <member name="E:Rebex.Net.TlsServerSocket.ValidatingCertificate">
      <summary>
            Occurs when a client certificate needs to be validated.
            </summary>
    </member>
  </members>
</doc>